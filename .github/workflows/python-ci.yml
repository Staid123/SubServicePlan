name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      database:
        image: postgres:latest
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      test_database:
        image: postgres:latest
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 1234
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready -U postgres" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # - name: Install Docker Compose
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install docker-compose -y

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create .env file
      run: |
        echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env
        echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        echo "POSTGRES_TEST_PORT=${{ secrets.POSTGRES_TEST_PORT }}" >> .env
        echo "POSTGRES_TEST_DB=${{ secrets.POSTGRES_TEST_DB }}" >> .env
        echo "POSTGRES_TEST_USER=${{ secrets.POSTGRES_TEST_USER }}" >> .env
        echo "POSTGRES_TEST_PASSWORD=${{ secrets.POSTGRES_TEST_PASSWORD }}" >> .env

    # - name: Start FastAPI service
    #   run: docker-compose up -d fastapi_app 

    # - name: Run Alembic migrations
    #   run: docker-compose exec fastapi_app alembic upgrade head

    - name: Run tests with pytest
      run: docker-compose exec fastapi_app pytest --maxfail=1 --disable-warnings -v

    # - name: Shut down services
    #   run: docker-compose down
